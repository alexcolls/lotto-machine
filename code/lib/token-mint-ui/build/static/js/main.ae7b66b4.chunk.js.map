{"version":3,"sources":["candy-machine.ts","connection.tsx","MintCountdown.tsx","MintButton.tsx","Home.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils.ts"],"names":["CANDY_MACHINE_PROGRAM","anchor","PublicKey","TOKEN_METADATA_PROGRAM_ID","awaitTransactionSignatureConfirmation","txid","timeout","connection","a","queryStatus","done","status","slot","confirmations","err","subId","Promise","resolve","reject","setTimeout","console","log","getSignatureStatuses","signatureStatuses","value","sleep","_signatureSubscriptions","removeSignatureListener","createAssociatedTokenAccountInstruction","associatedTokenAddress","payer","walletAddress","splTokenMintAddress","keys","pubkey","isSigner","isWritable","SystemProgram","programId","TOKEN_PROGRAM_ID","SYSVAR_RENT_PUBKEY","TransactionInstruction","SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID","data","Buffer","from","getCandyMachineState","anchorWallet","candyMachineId","provider","preflightCommitment","fetchIdl","idl","program","account","candyMachine","fetch","state","itemsAvailable","toNumber","itemsRedeemed","itemsRemaining","id","isSoldOut","isActive","isPresale","isWhitelistOnly","goLiveDate","treasury","wallet","tokenMint","gatekeeper","endSettings","whitelistMintSettings","hiddenSettings","price","getMasterEdition","mint","findProgramAddress","toBuffer","getMetadata","getCandyMachineCreator","mintOneToken","Keypair","generate","getAtaForMint","publicKey","userTokenAccountAddress","userPayingAccountAddress","candyMachineAddress","remainingAccounts","signers","cleanupInstructions","MintLayout","span","getMinimumBalanceForRentExemption","fromPubkey","newAccountPubkey","space","lamports","createAccount","Token","createInitMintInstruction","createMintToInstruction","instructions","getNetworkToken","gatekeeperNetwork","push","expireOnUse","CIVIC","getNetworkExpire","whitelistToken","mode","burnEveryTime","whitelistBurnAuthority","getAccountInfo","createApproveInstruction","createRevokeInstruction","transferAuthority","metadataAddress","masterEdition","candyMachineCreator","creatorBump","instruction","mintNft","accounts","metadata","mintAuthority","updateAuthority","tokenMetadataProgram","tokenProgram","systemProgram","rent","clock","SYSVAR_CLOCK_PUBKEY","recentBlockhashes","SYSVAR_SLOT_HASHES_PUBKEY","instructionSysvarAccount","SYSVAR_INSTRUCTIONS_PUBKEY","length","undefined","sendTransactions","txs","map","t","ms","SequenceType","instructionSet","signersSet","sequenceType","Parallel","commitment","successCallback","ind","failCallback","block","WalletNotConnectedError","unsignedTxns","getRecentBlockhash","i","transaction","Transaction","forEach","add","recentBlockhash","blockhash","setSigners","s","partialSign","signAllTransactions","signedTxns","pendingTxns","breakEarlyObject","breakEarly","signedTxnPromise","sendSignedTransaction","signedTransaction","then","catch","reason","StopOnFailure","all","number","getUnixTs","Date","getTime","DEFAULT_TIMEOUT","rawTransaction","serialize","startTime","sendRawTransaction","skipPreflight","confirmation","Error","error","simulateResult","simulateTransaction","logs","line","startsWith","slice","JSON","stringify","_recentBlockhash","_disableBlockhashCaching","signData","serializeMessage","wireTransaction","_serialize","encodedTransaction","toString","args","encoding","_rpcRequest","res","message","result","onSignature","context","e","useStyles","makeStyles","theme","createStyles","root","display","padding","spacing","margin","width","height","flexDirection","alignContent","alignItems","justifyContent","background","color","borderRadius","fontSize","marginBottom","fontWeight","item","MintCountdown","date","style","onComplete","classes","renderer","days","hours","minutes","seconds","completed","className","Paper","elevation","CTAButton","styled","Button","MintButton","onMint","isMinting","useGateway","requestGatewayToken","gatewayStatus","useState","clicked","setClicked","useEffect","GatewayStatus","ACTIVE","disabled","onClick","variant","CircularProgress","ConnectButton","WalletDialogButton","MintContainer","div","Logo","img","getCountdownDate","endSettingType","toDate","Home","props","isUserMinting","setIsUserMinting","setCandyMachine","open","severity","alertState","setAlertState","setIsActive","endDate","setEndDate","setItemsRemaining","isWhitelistUser","setIsWhitelistUser","setIsPresale","discountPrice","setDiscountPrice","rpcUrl","rpcHost","useWallet","useMemo","signTransaction","refreshCandyMachineState","useCallback","cndy","active","presale","token","getTokenAccountBalance","balance","valid","parseInt","amount","limit","Math","min","document","getElementById","click","connected","mintTxId","txTimeout","remaining","msg","code","window","location","reload","indexOf","toggleMintButton","now","Container","marginTop","maxWidth","position","src","alt","paddingBottom","backgroundColor","Grid","container","direction","wrap","xs","Typography","formatNumber","asNumber","align","clusterUrl","options","autoShowModal","textAlign","Snackbar","autoHideDuration","onClose","Alert","createTheme","palette","type","process","getCandyMachineId","network","Connection","App","endpoint","clusterApiUrl","wallets","getPhantomWallet","getSolflareWallet","getSlopeWallet","getSolletWallet","getSolletExtensionWallet","ThemeProvider","ConnectionProvider","WalletProvider","autoConnect","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","numberFormater","Intl","NumberFormat","minimumFractionDigits","maximumFractionDigits","format","val","LAMPORTS_PER_SOL","buyer"],"mappings":"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","file":"static/js/main.ae7b66b4.chunk.js","sourcesContent":["import * as anchor from '@project-serum/anchor';\r\n\r\nimport { MintLayout, TOKEN_PROGRAM_ID, Token } from '@solana/spl-token';\r\nimport { SystemProgram, SYSVAR_SLOT_HASHES_PUBKEY } from '@solana/web3.js';\r\nimport { sendTransactions } from './connection';\r\n\r\nimport {\r\n  CIVIC,\r\n  getAtaForMint,\r\n  getNetworkExpire,\r\n  getNetworkToken,\r\n  SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n} from './utils';\r\n\r\nexport const CANDY_MACHINE_PROGRAM = new anchor.web3.PublicKey(\r\n  'cndy3Z4yapfJBmL3ShUp5exZKqR3z33thTzeNMm2gRZ',\r\n);\r\n\r\nconst TOKEN_METADATA_PROGRAM_ID = new anchor.web3.PublicKey(\r\n  'metaqbxxUerdq28cj1RbAWkYQm3ybzjb6a8bt518x1s',\r\n);\r\n\r\ninterface CandyMachineState {\r\n  itemsAvailable: number;\r\n  itemsRedeemed: number;\r\n  itemsRemaining: number;\r\n  treasury: anchor.web3.PublicKey;\r\n  tokenMint: anchor.web3.PublicKey;\r\n  isSoldOut: boolean;\r\n  isActive: boolean;\r\n  isPresale: boolean;\r\n  isWhitelistOnly: boolean;\r\n  goLiveDate: anchor.BN;\r\n  price: anchor.BN;\r\n  gatekeeper: null | {\r\n    expireOnUse: boolean;\r\n    gatekeeperNetwork: anchor.web3.PublicKey;\r\n  };\r\n  endSettings: null | {\r\n    number: anchor.BN;\r\n    endSettingType: any;\r\n  };\r\n  whitelistMintSettings: null | {\r\n    mode: any;\r\n    mint: anchor.web3.PublicKey;\r\n    presale: boolean;\r\n    discountPrice: null | anchor.BN;\r\n  };\r\n  hiddenSettings: null | {\r\n    name: string;\r\n    uri: string;\r\n    hash: Uint8Array;\r\n  };\r\n}\r\n\r\nexport interface CandyMachineAccount {\r\n  id: anchor.web3.PublicKey;\r\n  program: anchor.Program;\r\n  state: CandyMachineState;\r\n}\r\n\r\nexport const awaitTransactionSignatureConfirmation = async (\r\n  txid: anchor.web3.TransactionSignature,\r\n  timeout: number,\r\n  connection: anchor.web3.Connection,\r\n  queryStatus = false,\r\n): Promise<anchor.web3.SignatureStatus | null | void> => {\r\n  let done = false;\r\n  let status: anchor.web3.SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log('Rejecting for timeout...');\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log('REST null result for', txid, status);\r\n            } else if (status.err) {\r\n              console.log('REST error for', txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log('REST no confirmations for', txid, status);\r\n            } else {\r\n              console.log('REST confirmation for', txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log('REST connection error: txid', txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  if (connection._signatureSubscriptions[subId]) {\r\n    connection.removeSignatureListener(subId);\r\n  }\r\n  done = true;\r\n  console.log('Returning status', status);\r\n  return status;\r\n};\r\n\r\nconst createAssociatedTokenAccountInstruction = (\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey,\r\n) => {\r\n  const keys = [\r\n    { pubkey: payer, isSigner: true, isWritable: true },\r\n    { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\r\n    { pubkey: walletAddress, isSigner: false, isWritable: false },\r\n    { pubkey: splTokenMintAddress, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n    {\r\n      pubkey: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new anchor.web3.TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n};\r\n\r\nexport const getCandyMachineState = async (\r\n  anchorWallet: anchor.Wallet,\r\n  candyMachineId: anchor.web3.PublicKey,\r\n  connection: anchor.web3.Connection,\r\n): Promise<CandyMachineAccount> => {\r\n  const provider = new anchor.Provider(connection, anchorWallet, {\r\n    preflightCommitment: 'processed',\r\n  });\r\n\r\n  const idl = await anchor.Program.fetchIdl(CANDY_MACHINE_PROGRAM, provider);\r\n\r\n  const program = new anchor.Program(idl!, CANDY_MACHINE_PROGRAM, provider);\r\n\r\n  const state: any = await program.account.candyMachine.fetch(candyMachineId);\r\n  const itemsAvailable = state.data.itemsAvailable.toNumber();\r\n  const itemsRedeemed = state.itemsRedeemed.toNumber();\r\n  const itemsRemaining = itemsAvailable - itemsRedeemed;\r\n\r\n  return {\r\n    id: candyMachineId,\r\n    program,\r\n    state: {\r\n      itemsAvailable,\r\n      itemsRedeemed,\r\n      itemsRemaining,\r\n      isSoldOut: itemsRemaining === 0,\r\n      isActive: false,\r\n      isPresale: false,\r\n      isWhitelistOnly: false,\r\n      goLiveDate: state.data.goLiveDate,\r\n      treasury: state.wallet,\r\n      tokenMint: state.tokenMint,\r\n      gatekeeper: state.data.gatekeeper,\r\n      endSettings: state.data.endSettings,\r\n      whitelistMintSettings: state.data.whitelistMintSettings,\r\n      hiddenSettings: state.data.hiddenSettings,\r\n      price: state.data.price,\r\n    },\r\n  };\r\n};\r\n\r\nconst getMasterEdition = async (\r\n  mint: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('metadata'),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n        Buffer.from('edition'),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID,\r\n    )\r\n  )[0];\r\n};\r\n\r\nconst getMetadata = async (\r\n  mint: anchor.web3.PublicKey,\r\n): Promise<anchor.web3.PublicKey> => {\r\n  return (\r\n    await anchor.web3.PublicKey.findProgramAddress(\r\n      [\r\n        Buffer.from('metadata'),\r\n        TOKEN_METADATA_PROGRAM_ID.toBuffer(),\r\n        mint.toBuffer(),\r\n      ],\r\n      TOKEN_METADATA_PROGRAM_ID,\r\n    )\r\n  )[0];\r\n};\r\n\r\nexport const getCandyMachineCreator = async (\r\n  candyMachine: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [Buffer.from('candy_machine'), candyMachine.toBuffer()],\r\n    CANDY_MACHINE_PROGRAM,\r\n  );\r\n};\r\n\r\nexport const mintOneToken = async (\r\n  candyMachine: CandyMachineAccount,\r\n  payer: anchor.web3.PublicKey,\r\n): Promise<(string | undefined)[]> => {\r\n  const mint = anchor.web3.Keypair.generate();\r\n\r\n  const userTokenAccountAddress = (\r\n    await getAtaForMint(mint.publicKey, payer)\r\n  )[0];\r\n\r\n  const userPayingAccountAddress = candyMachine.state.tokenMint\r\n    ? (await getAtaForMint(candyMachine.state.tokenMint, payer))[0]\r\n    : payer;\r\n\r\n  const candyMachineAddress = candyMachine.id;\r\n  const remainingAccounts = [];\r\n  const signers: anchor.web3.Keypair[] = [mint];\r\n  const cleanupInstructions = [];\r\n  const instructions = [\r\n    anchor.web3.SystemProgram.createAccount({\r\n      fromPubkey: payer,\r\n      newAccountPubkey: mint.publicKey,\r\n      space: MintLayout.span,\r\n      lamports:\r\n        await candyMachine.program.provider.connection.getMinimumBalanceForRentExemption(\r\n          MintLayout.span,\r\n        ),\r\n      programId: TOKEN_PROGRAM_ID,\r\n    }),\r\n    Token.createInitMintInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      mint.publicKey,\r\n      0,\r\n      payer,\r\n      payer,\r\n    ),\r\n    createAssociatedTokenAccountInstruction(\r\n      userTokenAccountAddress,\r\n      payer,\r\n      payer,\r\n      mint.publicKey,\r\n    ),\r\n    Token.createMintToInstruction(\r\n      TOKEN_PROGRAM_ID,\r\n      mint.publicKey,\r\n      userTokenAccountAddress,\r\n      payer,\r\n      [],\r\n      1,\r\n    ),\r\n  ];\r\n\r\n  if (candyMachine.state.gatekeeper) {\r\n    remainingAccounts.push({\r\n      pubkey: (\r\n        await getNetworkToken(\r\n          payer,\r\n          candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n        )\r\n      )[0],\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n    if (candyMachine.state.gatekeeper.expireOnUse) {\r\n      remainingAccounts.push({\r\n        pubkey: CIVIC,\r\n        isWritable: false,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: (\r\n          await getNetworkExpire(\r\n            candyMachine.state.gatekeeper.gatekeeperNetwork,\r\n          )\r\n        )[0],\r\n        isWritable: false,\r\n        isSigner: false,\r\n      });\r\n    }\r\n  }\r\n  if (candyMachine.state.whitelistMintSettings) {\r\n    const mint = new anchor.web3.PublicKey(\r\n      candyMachine.state.whitelistMintSettings.mint,\r\n    );\r\n\r\n    const whitelistToken = (await getAtaForMint(mint, payer))[0];\r\n    remainingAccounts.push({\r\n      pubkey: whitelistToken,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n\r\n    if (candyMachine.state.whitelistMintSettings.mode.burnEveryTime) {\r\n      const whitelistBurnAuthority = anchor.web3.Keypair.generate();\r\n\r\n      remainingAccounts.push({\r\n        pubkey: mint,\r\n        isWritable: true,\r\n        isSigner: false,\r\n      });\r\n      remainingAccounts.push({\r\n        pubkey: whitelistBurnAuthority.publicKey,\r\n        isWritable: false,\r\n        isSigner: true,\r\n      });\r\n      signers.push(whitelistBurnAuthority);\r\n      const exists =\r\n        await candyMachine.program.provider.connection.getAccountInfo(\r\n          whitelistToken,\r\n        );\r\n      if (exists) {\r\n        instructions.push(\r\n          Token.createApproveInstruction(\r\n            TOKEN_PROGRAM_ID,\r\n            whitelistToken,\r\n            whitelistBurnAuthority.publicKey,\r\n            payer,\r\n            [],\r\n            1,\r\n          ),\r\n        );\r\n        cleanupInstructions.push(\r\n          Token.createRevokeInstruction(\r\n            TOKEN_PROGRAM_ID,\r\n            whitelistToken,\r\n            payer,\r\n            [],\r\n          ),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  if (candyMachine.state.tokenMint) {\r\n    const transferAuthority = anchor.web3.Keypair.generate();\r\n\r\n    signers.push(transferAuthority);\r\n    remainingAccounts.push({\r\n      pubkey: userPayingAccountAddress,\r\n      isWritable: true,\r\n      isSigner: false,\r\n    });\r\n    remainingAccounts.push({\r\n      pubkey: transferAuthority.publicKey,\r\n      isWritable: false,\r\n      isSigner: true,\r\n    });\r\n\r\n    instructions.push(\r\n      Token.createApproveInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        userPayingAccountAddress,\r\n        transferAuthority.publicKey,\r\n        payer,\r\n        [],\r\n        candyMachine.state.price.toNumber(),\r\n      ),\r\n    );\r\n    cleanupInstructions.push(\r\n      Token.createRevokeInstruction(\r\n        TOKEN_PROGRAM_ID,\r\n        userPayingAccountAddress,\r\n        payer,\r\n        [],\r\n      ),\r\n    );\r\n  }\r\n  const metadataAddress = await getMetadata(mint.publicKey);\r\n  const masterEdition = await getMasterEdition(mint.publicKey);\r\n\r\n  const [candyMachineCreator, creatorBump] = await getCandyMachineCreator(\r\n    candyMachineAddress,\r\n  );\r\n\r\n  instructions.push(\r\n    await candyMachine.program.instruction.mintNft(creatorBump, {\r\n      accounts: {\r\n        candyMachine: candyMachineAddress,\r\n        candyMachineCreator,\r\n        payer: payer,\r\n        wallet: candyMachine.state.treasury,\r\n        mint: mint.publicKey,\r\n        metadata: metadataAddress,\r\n        masterEdition,\r\n        mintAuthority: payer,\r\n        updateAuthority: payer,\r\n        tokenMetadataProgram: TOKEN_METADATA_PROGRAM_ID,\r\n        tokenProgram: TOKEN_PROGRAM_ID,\r\n        systemProgram: SystemProgram.programId,\r\n        rent: anchor.web3.SYSVAR_RENT_PUBKEY,\r\n        clock: anchor.web3.SYSVAR_CLOCK_PUBKEY,\r\n        recentBlockhashes: SYSVAR_SLOT_HASHES_PUBKEY,\r\n        instructionSysvarAccount: anchor.web3.SYSVAR_INSTRUCTIONS_PUBKEY,\r\n      },\r\n      remainingAccounts:\r\n        remainingAccounts.length > 0 ? remainingAccounts : undefined,\r\n    }),\r\n  );\r\n\r\n  try {\r\n    return (\r\n      await sendTransactions(\r\n        candyMachine.program.provider.connection,\r\n        candyMachine.program.provider.wallet,\r\n        [instructions, cleanupInstructions],\r\n        [signers, []],\r\n      )\r\n    ).txs.map(t => t.txid);\r\n  } catch (e) {\r\n    console.log(e);\r\n  }\r\n\r\n  return [];\r\n};\r\n\r\nexport const shortenAddress = (address: string, chars = 4): string => {\r\n  return `${address.slice(0, chars)}...${address.slice(-chars)}`;\r\n};\r\n\r\nconst sleep = (ms: number): Promise<void> => {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n};\r\n","import {\r\n  Keypair,\r\n  Commitment,\r\n  Connection,\r\n  RpcResponseAndContext,\r\n  SignatureStatus,\r\n  SimulatedTransactionResponse,\r\n  Transaction,\r\n  TransactionInstruction,\r\n  TransactionSignature,\r\n  Blockhash,\r\n  FeeCalculator,\r\n} from '@solana/web3.js';\r\n\r\nimport { WalletNotConnectedError } from '@solana/wallet-adapter-base';\r\n\r\ninterface BlockhashAndFeeCalculator {\r\n  blockhash: Blockhash;\r\n  feeCalculator: FeeCalculator;\r\n}\r\n\r\nexport const getErrorForTransaction = async (\r\n  connection: Connection,\r\n  txid: string,\r\n) => {\r\n  // wait for all confirmation before geting transaction\r\n  await connection.confirmTransaction(txid, 'max');\r\n\r\n  const tx = await connection.getParsedConfirmedTransaction(txid);\r\n\r\n  const errors: string[] = [];\r\n  if (tx?.meta && tx.meta.logMessages) {\r\n    tx.meta.logMessages.forEach(log => {\r\n      const regex = /Error: (.*)/gm;\r\n      let m;\r\n      while ((m = regex.exec(log)) !== null) {\r\n        // This is necessary to avoid infinite loops with zero-width matches\r\n        if (m.index === regex.lastIndex) {\r\n          regex.lastIndex++;\r\n        }\r\n\r\n        if (m.length > 1) {\r\n          errors.push(m[1]);\r\n        }\r\n      }\r\n    });\r\n  }\r\n\r\n  return errors;\r\n};\r\n\r\nexport enum SequenceType {\r\n  Sequential,\r\n  Parallel,\r\n  StopOnFailure,\r\n}\r\n\r\nexport async function sendTransactionsWithManualRetry(\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[][],\r\n  signers: Keypair[][],\r\n): Promise<(string | undefined)[]> {\r\n  let stopPoint = 0;\r\n  let tries = 0;\r\n  let lastInstructionsLength = null;\r\n  let toRemoveSigners: Record<number, boolean> = {};\r\n  instructions = instructions.filter((instr, i) => {\r\n    if (instr.length > 0) {\r\n      return true;\r\n    } else {\r\n      toRemoveSigners[i] = true;\r\n      return false;\r\n    }\r\n  });\r\n  let ids: string[] = [];\r\n  let filteredSigners = signers.filter((_, i) => !toRemoveSigners[i]);\r\n\r\n  while (stopPoint < instructions.length && tries < 3) {\r\n    instructions = instructions.slice(stopPoint, instructions.length);\r\n    filteredSigners = filteredSigners.slice(stopPoint, filteredSigners.length);\r\n\r\n    if (instructions.length === lastInstructionsLength) tries = tries + 1;\r\n    else tries = 0;\r\n\r\n    try {\r\n      if (instructions.length === 1) {\r\n        const id = await sendTransactionWithRetry(\r\n          connection,\r\n          wallet,\r\n          instructions[0],\r\n          filteredSigners[0],\r\n          'single',\r\n        );\r\n        ids.push(id.txid);\r\n        stopPoint = 1;\r\n      } else {\r\n        const { txs } = await sendTransactions(\r\n          connection,\r\n          wallet,\r\n          instructions,\r\n          filteredSigners,\r\n          SequenceType.StopOnFailure,\r\n          'single',\r\n        );\r\n        ids = ids.concat(txs.map(t => t.txid));\r\n      }\r\n    } catch (e) {\r\n      console.error(e);\r\n    }\r\n    console.log(\r\n      'Died on ',\r\n      stopPoint,\r\n      'retrying from instruction',\r\n      instructions[stopPoint],\r\n      'instructions length is',\r\n      instructions.length,\r\n    );\r\n    lastInstructionsLength = instructions.length;\r\n  }\r\n\r\n  return ids;\r\n}\r\n\r\nexport const sendTransactions = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructionSet: TransactionInstruction[][],\r\n  signersSet: Keypair[][],\r\n  sequenceType: SequenceType = SequenceType.Parallel,\r\n  commitment: Commitment = 'singleGossip',\r\n  successCallback: (txid: string, ind: number) => void = (txid, ind) => {},\r\n  failCallback: (reason: string, ind: number) => boolean = (txid, ind) => false,\r\n  block?: BlockhashAndFeeCalculator,\r\n): Promise<{ number: number; txs: { txid: string; slot: number }[] }> => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  const unsignedTxns: Transaction[] = [];\r\n\r\n  if (!block) {\r\n    block = await connection.getRecentBlockhash(commitment);\r\n  }\r\n\r\n  for (let i = 0; i < instructionSet.length; i++) {\r\n    const instructions = instructionSet[i];\r\n    const signers = signersSet[i];\r\n\r\n    if (instructions.length === 0) {\r\n      continue;\r\n    }\r\n\r\n    let transaction = new Transaction();\r\n    instructions.forEach(instruction => transaction.add(instruction));\r\n    transaction.recentBlockhash = block.blockhash;\r\n    transaction.setSigners(\r\n      // fee payed by the wallet owner\r\n      wallet.publicKey,\r\n      ...signers.map(s => s.publicKey),\r\n    );\r\n\r\n    if (signers.length > 0) {\r\n      transaction.partialSign(...signers);\r\n    }\r\n\r\n    unsignedTxns.push(transaction);\r\n  }\r\n\r\n  const signedTxns = await wallet.signAllTransactions(unsignedTxns);\r\n\r\n  const pendingTxns: Promise<{ txid: string; slot: number }>[] = [];\r\n\r\n  let breakEarlyObject = { breakEarly: false, i: 0 };\r\n  console.log(\r\n    'Signed txns length',\r\n    signedTxns.length,\r\n    'vs handed in length',\r\n    instructionSet.length,\r\n  );\r\n  for (let i = 0; i < signedTxns.length; i++) {\r\n    const signedTxnPromise = sendSignedTransaction({\r\n      connection,\r\n      signedTransaction: signedTxns[i],\r\n    });\r\n\r\n    signedTxnPromise\r\n      .then(({ txid, slot }) => {\r\n        successCallback(txid, i);\r\n      })\r\n      .catch(reason => {\r\n        // @ts-ignore\r\n        failCallback(signedTxns[i], i);\r\n        if (sequenceType === SequenceType.StopOnFailure) {\r\n          breakEarlyObject.breakEarly = true;\r\n          breakEarlyObject.i = i;\r\n        }\r\n      });\r\n\r\n    if (sequenceType !== SequenceType.Parallel) {\r\n      try {\r\n        await signedTxnPromise;\r\n      } catch (e) {\r\n        console.log('Caught failure', e);\r\n        if (breakEarlyObject.breakEarly) {\r\n          console.log('Died on ', breakEarlyObject.i);\r\n          // Return the txn we failed on by index\r\n          return {\r\n            number: breakEarlyObject.i,\r\n            txs: await Promise.all(pendingTxns),\r\n          };\r\n        }\r\n      }\r\n    } else {\r\n      pendingTxns.push(signedTxnPromise);\r\n    }\r\n  }\r\n\r\n  if (sequenceType !== SequenceType.Parallel) {\r\n    await Promise.all(pendingTxns);\r\n  }\r\n\r\n  return { number: signedTxns.length, txs: await Promise.all(pendingTxns) };\r\n};\r\n\r\nexport const sendTransaction = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[],\r\n  signers: Keypair[],\r\n  awaitConfirmation = true,\r\n  commitment: Commitment = 'singleGossip',\r\n  includesFeePayer: boolean = false,\r\n  block?: BlockhashAndFeeCalculator,\r\n) => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  let transaction = new Transaction();\r\n  instructions.forEach(instruction => transaction.add(instruction));\r\n  transaction.recentBlockhash = (\r\n    block || (await connection.getRecentBlockhash(commitment))\r\n  ).blockhash;\r\n\r\n  if (includesFeePayer) {\r\n    transaction.setSigners(...signers.map(s => s.publicKey));\r\n  } else {\r\n    transaction.setSigners(\r\n      // fee payed by the wallet owner\r\n      wallet.publicKey,\r\n      ...signers.map(s => s.publicKey),\r\n    );\r\n  }\r\n\r\n  if (signers.length > 0) {\r\n    transaction.partialSign(...signers);\r\n  }\r\n  if (!includesFeePayer) {\r\n    transaction = await wallet.signTransaction(transaction);\r\n  }\r\n\r\n  const rawTransaction = transaction.serialize();\r\n  let options = {\r\n    skipPreflight: true,\r\n    commitment,\r\n  };\r\n\r\n  const txid = await connection.sendRawTransaction(rawTransaction, options);\r\n  let slot = 0;\r\n\r\n  if (awaitConfirmation) {\r\n    const confirmation = await awaitTransactionSignatureConfirmation(\r\n      txid,\r\n      DEFAULT_TIMEOUT,\r\n      connection,\r\n      commitment,\r\n    );\r\n\r\n    if (!confirmation)\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n    slot = confirmation?.slot || 0;\r\n\r\n    if (confirmation?.err) {\r\n      const errors = await getErrorForTransaction(connection, txid);\r\n\r\n      console.log(errors);\r\n      throw new Error(`Raw transaction ${txid} failed`);\r\n    }\r\n  }\r\n\r\n  return { txid, slot };\r\n};\r\n\r\nexport const sendTransactionWithRetry = async (\r\n  connection: Connection,\r\n  wallet: any,\r\n  instructions: TransactionInstruction[],\r\n  signers: Keypair[],\r\n  commitment: Commitment = 'singleGossip',\r\n  includesFeePayer: boolean = false,\r\n  block?: BlockhashAndFeeCalculator,\r\n  beforeSend?: () => void,\r\n) => {\r\n  if (!wallet.publicKey) throw new WalletNotConnectedError();\r\n\r\n  let transaction = new Transaction();\r\n  instructions.forEach(instruction => transaction.add(instruction));\r\n  transaction.recentBlockhash = (\r\n    block || (await connection.getRecentBlockhash(commitment))\r\n  ).blockhash;\r\n\r\n  if (includesFeePayer) {\r\n    transaction.setSigners(...signers.map(s => s.publicKey));\r\n  } else {\r\n    transaction.setSigners(\r\n      // fee payed by the wallet owner\r\n      wallet.publicKey,\r\n      ...signers.map(s => s.publicKey),\r\n    );\r\n  }\r\n\r\n  if (signers.length > 0) {\r\n    transaction.partialSign(...signers);\r\n  }\r\n  if (!includesFeePayer) {\r\n    transaction = await wallet.signTransaction(transaction);\r\n  }\r\n\r\n  if (beforeSend) {\r\n    beforeSend();\r\n  }\r\n\r\n  const { txid, slot } = await sendSignedTransaction({\r\n    connection,\r\n    signedTransaction: transaction,\r\n  });\r\n\r\n  return { txid, slot };\r\n};\r\n\r\nexport const getUnixTs = () => {\r\n  return new Date().getTime() / 1000;\r\n};\r\n\r\nconst DEFAULT_TIMEOUT = 15000;\r\n\r\nexport async function sendSignedTransaction({\r\n  signedTransaction,\r\n  connection,\r\n  timeout = DEFAULT_TIMEOUT,\r\n}: {\r\n  signedTransaction: Transaction;\r\n  connection: Connection;\r\n  sendingMessage?: string;\r\n  sentMessage?: string;\r\n  successMessage?: string;\r\n  timeout?: number;\r\n}): Promise<{ txid: string; slot: number }> {\r\n  const rawTransaction = signedTransaction.serialize();\r\n  const startTime = getUnixTs();\r\n  let slot = 0;\r\n  const txid: TransactionSignature = await connection.sendRawTransaction(\r\n    rawTransaction,\r\n    {\r\n      skipPreflight: true,\r\n    },\r\n  );\r\n\r\n  console.log('Started awaiting confirmation for', txid);\r\n\r\n  let done = false;\r\n  (async () => {\r\n    while (!done && getUnixTs() - startTime < timeout) {\r\n      connection.sendRawTransaction(rawTransaction, {\r\n        skipPreflight: true,\r\n      });\r\n      await sleep(500);\r\n    }\r\n  })();\r\n  try {\r\n    const confirmation = await awaitTransactionSignatureConfirmation(\r\n      txid,\r\n      timeout,\r\n      connection,\r\n      'recent',\r\n      true,\r\n    );\r\n\r\n    if (!confirmation)\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n\r\n    if (confirmation.err) {\r\n      console.error(confirmation.err);\r\n      throw new Error('Transaction failed: Custom instruction error');\r\n    }\r\n\r\n    slot = confirmation?.slot || 0;\r\n  } catch (err: any) {\r\n    console.error('Timeout Error caught', err);\r\n    if (err.timeout) {\r\n      throw new Error('Timed out awaiting confirmation on transaction');\r\n    }\r\n    let simulateResult: SimulatedTransactionResponse | null = null;\r\n    try {\r\n      simulateResult = (\r\n        await simulateTransaction(connection, signedTransaction, 'single')\r\n      ).value;\r\n    } catch (e) {}\r\n    if (simulateResult && simulateResult.err) {\r\n      if (simulateResult.logs) {\r\n        for (let i = simulateResult.logs.length - 1; i >= 0; --i) {\r\n          const line = simulateResult.logs[i];\r\n          if (line.startsWith('Program log: ')) {\r\n            throw new Error(\r\n              'Transaction failed: ' + line.slice('Program log: '.length),\r\n            );\r\n          }\r\n        }\r\n      }\r\n      throw new Error(JSON.stringify(simulateResult.err));\r\n    }\r\n    // throw new Error('Transaction failed');\r\n  } finally {\r\n    done = true;\r\n  }\r\n\r\n  console.log('Latency', txid, getUnixTs() - startTime);\r\n  return { txid, slot };\r\n}\r\n\r\nasync function simulateTransaction(\r\n  connection: Connection,\r\n  transaction: Transaction,\r\n  commitment: Commitment,\r\n): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\r\n  // @ts-ignore\r\n  transaction.recentBlockhash = await connection._recentBlockhash(\r\n    // @ts-ignore\r\n    connection._disableBlockhashCaching,\r\n  );\r\n\r\n  const signData = transaction.serializeMessage();\r\n  // @ts-ignore\r\n  const wireTransaction = transaction._serialize(signData);\r\n  const encodedTransaction = wireTransaction.toString('base64');\r\n  const config: any = { encoding: 'base64', commitment };\r\n  const args = [encodedTransaction, config];\r\n\r\n  // @ts-ignore\r\n  const res = await connection._rpcRequest('simulateTransaction', args);\r\n  if (res.error) {\r\n    throw new Error('failed to simulate transaction: ' + res.error.message);\r\n  }\r\n  return res.result;\r\n}\r\n\r\nasync function awaitTransactionSignatureConfirmation(\r\n  txid: TransactionSignature,\r\n  timeout: number,\r\n  connection: Connection,\r\n  commitment: Commitment = 'recent',\r\n  queryStatus = false,\r\n): Promise<SignatureStatus | null | void> {\r\n  let done = false;\r\n  let status: SignatureStatus | null | void = {\r\n    slot: 0,\r\n    confirmations: 0,\r\n    err: null,\r\n  };\r\n  let subId = 0;\r\n  status = await new Promise(async (resolve, reject) => {\r\n    setTimeout(() => {\r\n      if (done) {\r\n        return;\r\n      }\r\n      done = true;\r\n      console.log('Rejecting for timeout...');\r\n      reject({ timeout: true });\r\n    }, timeout);\r\n    try {\r\n      subId = connection.onSignature(\r\n        txid,\r\n        (result, context) => {\r\n          done = true;\r\n          status = {\r\n            err: result.err,\r\n            slot: context.slot,\r\n            confirmations: 0,\r\n          };\r\n          if (result.err) {\r\n            console.log('Rejected via websocket', result.err);\r\n            reject(status);\r\n          } else {\r\n            console.log('Resolved via websocket', result);\r\n            resolve(status);\r\n          }\r\n        },\r\n        commitment,\r\n      );\r\n    } catch (e) {\r\n      done = true;\r\n      console.error('WS error in setup', txid, e);\r\n    }\r\n    while (!done && queryStatus) {\r\n      // eslint-disable-next-line no-loop-func\r\n      (async () => {\r\n        try {\r\n          const signatureStatuses = await connection.getSignatureStatuses([\r\n            txid,\r\n          ]);\r\n          status = signatureStatuses && signatureStatuses.value[0];\r\n          if (!done) {\r\n            if (!status) {\r\n              console.log('REST null result for', txid, status);\r\n            } else if (status.err) {\r\n              console.log('REST error for', txid, status);\r\n              done = true;\r\n              reject(status.err);\r\n            } else if (!status.confirmations) {\r\n              console.log('REST no confirmations for', txid, status);\r\n            } else {\r\n              console.log('REST confirmation for', txid, status);\r\n              done = true;\r\n              resolve(status);\r\n            }\r\n          }\r\n        } catch (e) {\r\n          if (!done) {\r\n            console.log('REST connection error: txid', txid, e);\r\n          }\r\n        }\r\n      })();\r\n      await sleep(2000);\r\n    }\r\n  });\r\n\r\n  //@ts-ignore\r\n  if (connection._signatureSubscriptions[subId])\r\n    connection.removeSignatureListener(subId);\r\n  done = true;\r\n  console.log('Returning status', status);\r\n  return status;\r\n}\r\nexport function sleep(ms: number): Promise<void> {\r\n  return new Promise(resolve => setTimeout(resolve, ms));\r\n}\r\n","import { Paper } from '@material-ui/core';\r\nimport Countdown from 'react-countdown';\r\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n  createStyles({\r\n    root: {\r\n      display: 'flex',\r\n      padding: theme.spacing(0),\r\n      '& > *': {\r\n        margin: theme.spacing(0.4),\r\n        width: theme.spacing(6),\r\n        height: theme.spacing(6),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        alignContent: 'center',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        background: '#384457',\r\n        color: 'white',\r\n        borderRadius: 5,\r\n        fontSize: 10,\r\n      },\r\n    },\r\n    done: {\r\n      display: 'flex',\r\n      margin: 0,\r\n      marginBottom: theme.spacing(0.5),\r\n      height: theme.spacing(3.5),\r\n      padding: theme.spacing(1),\r\n      flexDirection: 'column',\r\n      alignContent: 'center',\r\n      alignItems: 'center',\r\n      justifyContent: 'center',\r\n      background: '#384457',\r\n      color: 'white',\r\n      borderRadius: 5,\r\n      fontWeight: 'bold',\r\n      fontSize: 18,\r\n    },\r\n    item: {\r\n      fontWeight: 'bold',\r\n      fontSize: 18,\r\n    },\r\n  }),\r\n);\r\n\r\ninterface MintCountdownProps {\r\n  date: Date | undefined;\r\n  style?: React.CSSProperties;\r\n  status?: string;\r\n  onComplete?: () => void;\r\n}\r\n\r\ninterface MintCountdownRender {\r\n  days: number;\r\n  hours: number;\r\n  minutes: number;\r\n  seconds: number;\r\n  completed: boolean;\r\n}\r\n\r\nexport const MintCountdown: React.FC<MintCountdownProps> = ({\r\n  date,\r\n  status,\r\n  style,\r\n  onComplete,\r\n}) => {\r\n  const classes = useStyles();\r\n  const renderCountdown = ({\r\n    days,\r\n    hours,\r\n    minutes,\r\n    seconds,\r\n    completed,\r\n  }: MintCountdownRender) => {\r\n    hours += days * 24;\r\n    if (completed) {\r\n      return status ? <span className={classes.done}>{status}</span> : null;\r\n    } else {\r\n      return (\r\n        <div className={classes.root} style={style}>\r\n          <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              {hours < 10 ? `0${hours}` : hours}\r\n            </span>\r\n            <span>hrs</span>\r\n          </Paper>\r\n          <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              {minutes < 10 ? `0${minutes}` : minutes}\r\n            </span>\r\n            <span>mins</span>\r\n          </Paper>\r\n          <Paper elevation={0}>\r\n            <span className={classes.item}>\r\n              {seconds < 10 ? `0${seconds}` : seconds}\r\n            </span>\r\n            <span>secs</span>\r\n          </Paper>\r\n        </div>\r\n      );\r\n    }\r\n  };\r\n\r\n  if (date) {\r\n    return (\r\n      <Countdown\r\n        date={date}\r\n        onComplete={onComplete}\r\n        renderer={renderCountdown}\r\n      />\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n","import styled from 'styled-components';\r\nimport Button from '@material-ui/core/Button';\r\nimport { CandyMachineAccount } from './candy-machine';\r\nimport { CircularProgress } from '@material-ui/core';\r\nimport { GatewayStatus, useGateway } from '@civic/solana-gateway-react';\r\nimport { useEffect, useState } from 'react';\r\n\r\nexport const CTAButton = styled(Button)`\r\n  border-radius: 22px;\r\n  width: 100%;\r\n  height: 66px;\r\n  margin-top: 0px;\r\n  margin-bottom: 0px;\r\n  background: linear-gradient(180deg, #f8c729 0%, #f8c277 100%);\r\n  color: black;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`;\r\n\r\nexport const MintButton = ({\r\n  onMint,\r\n  candyMachine,\r\n  isMinting,\r\n  isActive,\r\n}: {\r\n  onMint: () => Promise<void>;\r\n  candyMachine?: CandyMachineAccount;\r\n  isMinting: boolean;\r\n  isActive: boolean;\r\n}) => {\r\n  const { requestGatewayToken, gatewayStatus } = useGateway();\r\n  const [clicked, setClicked] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (gatewayStatus === GatewayStatus.ACTIVE && clicked) {\r\n      onMint();\r\n      setClicked(false);\r\n    }\r\n  }, [gatewayStatus, clicked, setClicked, onMint]);\r\n\r\n  const getMintButtonContent = () => {\r\n    if (candyMachine?.state.isSoldOut) {\r\n      return 'SOLD OUT';\r\n    } else if (isMinting) {\r\n      return <CircularProgress />;\r\n    } else if (\r\n      candyMachine?.state.isPresale ||\r\n      candyMachine?.state.isWhitelistOnly\r\n    ) {\r\n      return 'WHITELIST MINT';\r\n    } else if (clicked && candyMachine?.state.gatekeeper) {\r\n      return <CircularProgress />;\r\n    }\r\n\r\n    return 'MINT';\r\n  };\r\n\r\n  return (\r\n    <CTAButton\r\n      disabled={clicked || isMinting || !isActive}\r\n      onClick={async () => {\r\n        setClicked(true);\r\n        if (candyMachine?.state.isActive && candyMachine?.state.gatekeeper) {\r\n          if (gatewayStatus === GatewayStatus.ACTIVE) {\r\n            setClicked(true);\r\n          } else {\r\n            await requestGatewayToken();\r\n          }\r\n        } else {\r\n          await onMint();\r\n          setClicked(false);\r\n        }\r\n      }}\r\n      variant=\"contained\"\r\n    >\r\n      {getMintButtonContent()}\r\n    </CTAButton>\r\n  );\r\n};\r\n","import { useEffect, useMemo, useState, useCallback } from 'react';\r\nimport * as anchor from '@project-serum/anchor';\r\n\r\nimport styled from 'styled-components';\r\nimport { Container, Snackbar } from '@material-ui/core';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { PublicKey } from '@solana/web3.js';\r\nimport { useWallet } from '@solana/wallet-adapter-react';\r\nimport { WalletDialogButton } from '@solana/wallet-adapter-material-ui';\r\nimport {\r\n  awaitTransactionSignatureConfirmation,\r\n  CandyMachineAccount,\r\n  CANDY_MACHINE_PROGRAM,\r\n  getCandyMachineState,\r\n  mintOneToken,\r\n} from './candy-machine';\r\nimport { AlertState, toDate, formatNumber, getAtaForMint } from './utils';\r\nimport { MintCountdown } from './MintCountdown';\r\nimport { MintButton } from './MintButton';\r\nimport { GatewayProvider } from '@civic/solana-gateway-react';\r\n\r\nconst ConnectButton = styled(WalletDialogButton)`\r\n  border-radius: 22px;\r\n  width: 100%;\r\n  height: 60px;\r\n  margin-top: 10px;\r\n  margin-bottom: 10px;\r\n  background: linear-gradient(180deg, #f8c729 0%, #f8c277 100%);\r\n  color: black;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst MintContainer = styled.div`\r\n  border-radius: 22px;\r\n  width: 100%;\r\n  height: 66px;\r\n  margin-top: 22px;\r\n  margin-bottom: 22px;\r\n  background: linear-gradient(180deg, #f8c729 0%, #f8c277 100%);\r\n  color: black;\r\n  font-size: 16px;\r\n  font-weight: bold;\r\n`;\r\n\r\nconst Logo = styled.img`\r\n  text-align: center;\r\n  width: 220px;\r\n  margin-top: 10px;\r\n  margin-bottom: 5px;\r\n`;\r\n\r\n\r\nexport interface HomeProps {\r\n  candyMachineId?: anchor.web3.PublicKey;\r\n  connection: anchor.web3.Connection;\r\n  txTimeout: number;\r\n  rpcHost: string;\r\n}\r\n\r\nconst Home = (props: HomeProps) => {\r\n  const [isUserMinting, setIsUserMinting] = useState(false);\r\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\r\n  const [alertState, setAlertState] = useState<AlertState>({\r\n    open: false,\r\n    message: '',\r\n    severity: undefined,\r\n  });\r\n  const [isActive, setIsActive] = useState(false);\r\n  const [endDate, setEndDate] = useState<Date>();\r\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\r\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\r\n  const [isPresale, setIsPresale] = useState(false);\r\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\r\n\r\n  const rpcUrl = props.rpcHost;\r\n  const wallet = useWallet();\r\n\r\n  const anchorWallet = useMemo(() => {\r\n    if (\r\n      !wallet ||\r\n      !wallet.publicKey ||\r\n      !wallet.signAllTransactions ||\r\n      !wallet.signTransaction\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    return {\r\n      publicKey: wallet.publicKey,\r\n      signAllTransactions: wallet.signAllTransactions,\r\n      signTransaction: wallet.signTransaction,\r\n    } as anchor.Wallet;\r\n  }, [wallet]);\r\n\r\n  const refreshCandyMachineState = useCallback(async () => {\r\n    if (!anchorWallet) {\r\n      return;\r\n    }\r\n\r\n    if (props.candyMachineId) {\r\n      try {\r\n        const cndy = await getCandyMachineState(\r\n          anchorWallet,\r\n          props.candyMachineId,\r\n          props.connection,\r\n        );\r\n        let active =\r\n          cndy?.state.goLiveDate?.toNumber() < new Date().getTime() / 1000;\r\n        let presale = false;\r\n        // whitelist mint?\r\n        if (cndy?.state.whitelistMintSettings) {\r\n          // is it a presale mint?\r\n          if (\r\n            cndy.state.whitelistMintSettings.presale &&\r\n            (!cndy.state.goLiveDate ||\r\n              cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\r\n          ) {\r\n            presale = true;\r\n          }\r\n          // is there a discount?\r\n          if (cndy.state.whitelistMintSettings.discountPrice) {\r\n            setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\r\n          } else {\r\n            setDiscountPrice(undefined);\r\n            // when presale=false and discountPrice=null, mint is restricted\r\n            // to whitelist users only\r\n            if (!cndy.state.whitelistMintSettings.presale) {\r\n              cndy.state.isWhitelistOnly = true;\r\n            }\r\n          }\r\n          // retrieves the whitelist token\r\n          const mint = new anchor.web3.PublicKey(\r\n            cndy.state.whitelistMintSettings.mint,\r\n          );\r\n          const token = (await getAtaForMint(mint, anchorWallet.publicKey))[0];\r\n\r\n          try {\r\n            const balance = await props.connection.getTokenAccountBalance(\r\n              token,\r\n            );\r\n            let valid = parseInt(balance.value.amount) > 0;\r\n            // only whitelist the user if the balance > 0\r\n            setIsWhitelistUser(valid);\r\n            active = (presale && valid) || active;\r\n          } catch (e) {\r\n            setIsWhitelistUser(false);\r\n            // no whitelist user, no mint\r\n            if (cndy.state.isWhitelistOnly) {\r\n              active = false;\r\n            }\r\n            console.log('There was a problem fetching whitelist token balance');\r\n            console.log(e);\r\n          }\r\n        }\r\n        // datetime to stop the mint?\r\n        if (cndy?.state.endSettings?.endSettingType.date) {\r\n          setEndDate(toDate(cndy.state.endSettings.number));\r\n          if (\r\n            cndy.state.endSettings.number.toNumber() <\r\n            new Date().getTime() / 1000\r\n          ) {\r\n            active = false;\r\n          }\r\n        }\r\n        // amount to stop the mint?\r\n        if (cndy?.state.endSettings?.endSettingType.amount) {\r\n          let limit = Math.min(\r\n            cndy.state.endSettings.number.toNumber(),\r\n            cndy.state.itemsAvailable,\r\n          );\r\n          if (cndy.state.itemsRedeemed < limit) {\r\n            setItemsRemaining(limit - cndy.state.itemsRedeemed);\r\n          } else {\r\n            setItemsRemaining(0);\r\n            cndy.state.isSoldOut = true;\r\n          }\r\n        } else {\r\n          setItemsRemaining(cndy.state.itemsRemaining);\r\n        }\r\n\r\n        if (cndy.state.isSoldOut) {\r\n          active = false;\r\n        }\r\n\r\n        setIsActive((cndy.state.isActive = active));\r\n        setIsPresale((cndy.state.isPresale = presale));\r\n        setCandyMachine(cndy);\r\n      } catch (e) {\r\n        console.log('There was a problem fetching Candy Machine state');\r\n        console.log(e);\r\n      }\r\n    }\r\n  }, [anchorWallet, props.candyMachineId, props.connection]);\r\n\r\n  const onMint = async () => {\r\n    try {\r\n      setIsUserMinting(true);\r\n      document.getElementById('#identity')?.click();\r\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\r\n        const mintTxId = (\r\n          await mintOneToken(candyMachine, wallet.publicKey)\r\n        )[0];\r\n\r\n        let status: any = { err: true };\r\n        if (mintTxId) {\r\n          status = await awaitTransactionSignatureConfirmation(\r\n            mintTxId,\r\n            props.txTimeout,\r\n            props.connection,\r\n            true,\r\n          );\r\n        }\r\n\r\n        if (status && !status.err) {\r\n          // manual update since the refresh might not detect\r\n          // the change immediately\r\n          let remaining = itemsRemaining! - 1;\r\n          setItemsRemaining(remaining);\r\n          setIsActive((candyMachine.state.isActive = remaining > 0));\r\n          candyMachine.state.isSoldOut = remaining === 0;\r\n          setAlertState({\r\n            open: true,\r\n            message: 'Congratulations! Mint succeeded!',\r\n            severity: 'success',\r\n          });\r\n        } else {\r\n          setAlertState({\r\n            open: true,\r\n            message: 'Mint failed! Please try again!',\r\n            severity: 'error',\r\n          });\r\n        }\r\n      }\r\n    } catch (error: any) {\r\n      let message = error.msg || 'Minting failed! Please try again!';\r\n      if (!error.msg) {\r\n        if (!error.message) {\r\n          message = 'Transaction Timeout! Please try again.';\r\n        } else if (error.message.indexOf('0x137')) {\r\n          message = `SOLD OUT!`;\r\n        } else if (error.message.indexOf('0x135')) {\r\n          message = `Insufficient funds to mint. Please fund your wallet.`;\r\n        }\r\n      } else {\r\n        if (error.code === 311) {\r\n          message = `SOLD OUT!`;\r\n          window.location.reload();\r\n        } else if (error.code === 312) {\r\n          message = `Minting period hasn't started yet.`;\r\n        }\r\n      }\r\n\r\n      setAlertState({\r\n        open: true,\r\n        message,\r\n        severity: 'error',\r\n      });\r\n      // updates the candy machine state to reflect the lastest\r\n      // information on chain\r\n      refreshCandyMachineState();\r\n    } finally {\r\n      setIsUserMinting(false);\r\n    }\r\n  };\r\n\r\n  const toggleMintButton = () => {\r\n    let active = !isActive || isPresale;\r\n\r\n    if (active) {\r\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\r\n        active = false;\r\n      }\r\n      if (endDate && Date.now() >= endDate.getTime()) {\r\n        active = false;\r\n      }\r\n    }\r\n\r\n    if (\r\n      isPresale &&\r\n      candyMachine!.state.goLiveDate &&\r\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\r\n    ) {\r\n      setIsPresale((candyMachine!.state.isPresale = false));\r\n    }\r\n\r\n    setIsActive((candyMachine!.state.isActive = active));\r\n  };\r\n\r\n  useEffect(() => {\r\n    refreshCandyMachineState();\r\n  }, [\r\n    anchorWallet,\r\n    props.candyMachineId,\r\n    props.connection,\r\n    refreshCandyMachineState,\r\n  ]);\r\n\r\n  return (\r\n    <Container style={{ marginTop: 100, borderRadius: 22 }}>      \r\n      <Container maxWidth=\"xs\" style={{ position: 'relative', borderRadius: 22 }}>\r\n        <Logo src=\"./solucky.png\" alt=\"solucky\"/>\r\n        <h1>SOLUCKY LOTTO</h1>\r\n        <Paper\r\n          style={{\r\n            padding: 24,\r\n            paddingBottom: 10,\r\n            backgroundColor: '#151A1F',\r\n            borderRadius: 6,\r\n          }}\r\n        >\r\n          {!wallet.connected ? (\r\n            <ConnectButton>Connect Wallet</ConnectButton>\r\n          ) : (\r\n            <>\r\n              {candyMachine && (\r\n                <Grid\r\n                  container\r\n                  direction=\"row\"\r\n                  justifyContent=\"center\"\r\n                  wrap=\"nowrap\"\r\n                >\r\n                  <Grid item xs={3}>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\">\r\n                      Remaining\r\n                    </Typography>\r\n                    <Typography\r\n                      variant=\"h6\"\r\n                      color=\"textPrimary\"\r\n                      style={{\r\n                        fontWeight: 'bold',\r\n                      }}\r\n                    >\r\n                      {`${itemsRemaining}`}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={4}>\r\n                    <Typography variant=\"body2\" color=\"textSecondary\">\r\n                      {isWhitelistUser && discountPrice\r\n                        ? 'Discount Price'\r\n                        : 'Price'}\r\n                    </Typography>\r\n                    <Typography\r\n                      variant=\"h6\"\r\n                      color=\"textPrimary\"\r\n                      style={{ fontWeight: 'bold' }}\r\n                    >\r\n                      {isWhitelistUser && discountPrice\r\n                        ? `◎ ${formatNumber.asNumber(discountPrice)}`\r\n                        : `◎ ${formatNumber.asNumber(\r\n                            candyMachine.state.price,\r\n                          )}`}\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item xs={5}>\r\n                    {isActive && endDate && Date.now() < endDate.getTime() ? (\r\n                      <>\r\n                        <MintCountdown\r\n                          key=\"endSettings\"\r\n                          date={getCountdownDate(candyMachine)}\r\n                          style={{ justifyContent: 'flex-end' }}\r\n                          status=\"COMPLETED\"\r\n                          onComplete={toggleMintButton}\r\n                        />\r\n                        <Typography\r\n                          variant=\"caption\"\r\n                          align=\"center\"\r\n                          display=\"block\"\r\n                          style={{ fontWeight: 'bold' }}\r\n                        >\r\n                          TO END OF MINT\r\n                        </Typography>\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <MintCountdown\r\n                          key=\"goLive\"\r\n                          date={getCountdownDate(candyMachine)}\r\n                          style={{ justifyContent: 'flex-end' }}\r\n                          status={\r\n                            candyMachine?.state?.isSoldOut ||\r\n                            (endDate && Date.now() > endDate.getTime())\r\n                              ? 'COMPLETED'\r\n                              : isPresale\r\n                              ? 'PRESALE'\r\n                              : 'LIVE'\r\n                          }\r\n                          onComplete={toggleMintButton}\r\n                        />\r\n                        {isPresale &&\r\n                          candyMachine.state.goLiveDate &&\r\n                          candyMachine.state.goLiveDate.toNumber() >\r\n                            new Date().getTime() / 1000 && (\r\n                            <Typography\r\n                              variant=\"caption\"\r\n                              align=\"center\"\r\n                              display=\"block\"\r\n                              style={{ fontWeight: 'bold' }}\r\n                            >\r\n                              UNTIL PUBLIC MINT\r\n                            </Typography>\r\n                          )}\r\n                      </>\r\n                    )}\r\n                  </Grid>\r\n                </Grid>\r\n              )}\r\n              <MintContainer>\r\n                {candyMachine?.state.isActive &&\r\n                candyMachine?.state.gatekeeper &&\r\n                wallet.publicKey &&\r\n                wallet.signTransaction ? (\r\n                  <GatewayProvider\r\n                    wallet={{\r\n                      publicKey:\r\n                        wallet.publicKey ||\r\n                        new PublicKey(CANDY_MACHINE_PROGRAM),\r\n                      //@ts-ignore\r\n                      signTransaction: wallet.signTransaction,\r\n                    }}\r\n                    gatekeeperNetwork={\r\n                      candyMachine?.state?.gatekeeper?.gatekeeperNetwork\r\n                    }\r\n                    clusterUrl={rpcUrl}\r\n                    options={{ autoShowModal: false }}\r\n                  >\r\n                    <MintButton\r\n                      candyMachine={candyMachine}\r\n                      isMinting={isUserMinting}\r\n                      onMint={onMint}\r\n                      isActive={isActive || (isPresale && isWhitelistUser)}\r\n                    />\r\n                  </GatewayProvider>\r\n                ) : (\r\n                  <MintButton\r\n                    candyMachine={candyMachine}\r\n                    isMinting={isUserMinting}\r\n                    onMint={onMint}\r\n                    isActive={isActive || (isPresale && isWhitelistUser)}\r\n                  />\r\n                )}\r\n              </MintContainer>\r\n            </>\r\n          )}\r\n          <Typography\r\n            variant=\"caption\"\r\n            align=\"center\"\r\n            display=\"block\"\r\n            style={{ marginTop: 22, marginBottom: 22, color: '#f8c729' }}\r\n          >\r\n            Mint your LUCKYCAT to join next Friday's Lotto-Machine! More info in soluckylotto.com.\r\n          </Typography>\r\n        </Paper>\r\n      </Container>  \r\n      \r\n      <div style={{ position:'relative', textAlign: 'center', marginTop: 44, marginBottom: 44, color: 'grey'}}>\r\n        <Typography\r\n              variant=\"caption\"\r\n              align=\"center\"\r\n              display=\"block\"\r\n            >\r\n              SOLuckyLotto ◎ 2022 All rights reserved. A Solana community-based project built in the Solana blockchain.\r\n              This is a web3 site, thus no data is saved in our server, neither cookies.\r\n        </Typography>\r\n      </div>\r\n     \r\n      <Snackbar\r\n        open={alertState.open}\r\n        autoHideDuration={6000}\r\n        onClose={() => setAlertState({ ...alertState, open: false })}\r\n      >\r\n        <Alert\r\n          onClose={() => setAlertState({ ...alertState, open: false })}\r\n          severity={alertState.severity}\r\n        >\r\n          {alertState.message}\r\n        </Alert>\r\n      </Snackbar>\r\n    </Container>\r\n  );\r\n};\r\n\r\nconst getCountdownDate = (\r\n  candyMachine: CandyMachineAccount,\r\n): Date | undefined => {\r\n  if (\r\n    candyMachine.state.isActive &&\r\n    candyMachine.state.endSettings?.endSettingType.date\r\n  ) {\r\n    return toDate(candyMachine.state.endSettings.number);\r\n  }\r\n\r\n  return toDate(\r\n    candyMachine.state.goLiveDate\r\n      ? candyMachine.state.goLiveDate\r\n      : candyMachine.state.isPresale\r\n      ? new anchor.BN(new Date().getTime() / 1000)\r\n      : undefined,\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import './App.css';\r\nimport { useMemo } from 'react';\r\nimport * as anchor from '@project-serum/anchor';\r\nimport Home from './Home';\r\n\r\nimport { clusterApiUrl } from '@solana/web3.js';\r\nimport { WalletAdapterNetwork } from '@solana/wallet-adapter-base';\r\nimport {\r\n  getPhantomWallet,\r\n  getSlopeWallet,\r\n  getSolflareWallet,\r\n  getSolletWallet,\r\n  getSolletExtensionWallet,\r\n} from '@solana/wallet-adapter-wallets';\r\n\r\nimport {\r\n  ConnectionProvider,\r\n  WalletProvider,\r\n} from '@solana/wallet-adapter-react';\r\nimport { WalletDialogProvider } from '@solana/wallet-adapter-material-ui';\r\n\r\nimport { ThemeProvider, createTheme } from '@material-ui/core';\r\n\r\nconst theme = createTheme({\r\n  palette: {\r\n    type: 'dark',\r\n  },\r\n});\r\n\r\nconst getCandyMachineId = (): anchor.web3.PublicKey | undefined => {\r\n  try {\r\n    const candyMachineId = new anchor.web3.PublicKey(\r\n      process.env.REACT_APP_CANDY_MACHINE_ID!,\r\n    );\r\n\r\n    return candyMachineId;\r\n  } catch (e) {\r\n    console.log('Failed to construct CandyMachineId', e);\r\n    return undefined;\r\n  }\r\n};\r\n\r\nconst candyMachineId = getCandyMachineId();\r\nconst network = process.env.REACT_APP_SOLANA_NETWORK as WalletAdapterNetwork;\r\nconst rpcHost = process.env.REACT_APP_SOLANA_RPC_HOST!;\r\nconst connection = new anchor.web3.Connection(\r\n  rpcHost ? rpcHost : anchor.web3.clusterApiUrl('devnet'),\r\n);\r\n\r\nconst txTimeoutInMilliseconds = 30000;\r\n\r\nconst App = () => {\r\n  const endpoint = useMemo(() => clusterApiUrl(network), []);\r\n\r\n  const wallets = useMemo(\r\n    () => [\r\n      getPhantomWallet(),\r\n      getSolflareWallet(),\r\n      getSlopeWallet(),\r\n      getSolletWallet({ network }),\r\n      getSolletExtensionWallet({ network }),\r\n    ],\r\n    [],\r\n  );\r\n\r\n  return (\r\n    <ThemeProvider theme={theme}>\r\n      <ConnectionProvider endpoint={endpoint}>\r\n        <WalletProvider wallets={wallets} autoConnect>\r\n          <WalletDialogProvider>\r\n            <Home\r\n              candyMachineId={candyMachineId}\r\n              connection={connection}\r\n              txTimeout={txTimeoutInMilliseconds}\r\n              rpcHost={rpcHost}\r\n            />\r\n          </WalletDialogProvider>\r\n        </WalletProvider>\r\n      </ConnectionProvider>\r\n    </ThemeProvider>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","import * as anchor from '@project-serum/anchor';\r\nimport { TOKEN_PROGRAM_ID } from '@solana/spl-token';\r\nimport { SystemProgram } from '@solana/web3.js';\r\nimport {\r\n  LAMPORTS_PER_SOL,\r\n  SYSVAR_RENT_PUBKEY,\r\n  TransactionInstruction,\r\n} from '@solana/web3.js';\r\n\r\nexport interface AlertState {\r\n  open: boolean;\r\n  message: string;\r\n  severity: 'success' | 'info' | 'warning' | 'error' | undefined;\r\n}\r\n\r\nexport const toDate = (value?: anchor.BN) => {\r\n  if (!value) {\r\n    return;\r\n  }\r\n\r\n  return new Date(value.toNumber() * 1000);\r\n};\r\n\r\nconst numberFormater = new Intl.NumberFormat('en-US', {\r\n  style: 'decimal',\r\n  minimumFractionDigits: 2,\r\n  maximumFractionDigits: 2,\r\n});\r\n\r\nexport const formatNumber = {\r\n  format: (val?: number) => {\r\n    if (!val) {\r\n      return '--';\r\n    }\r\n\r\n    return numberFormater.format(val);\r\n  },\r\n  asNumber: (val?: anchor.BN) => {\r\n    if (!val) {\r\n      return undefined;\r\n    }\r\n\r\n    return val.toNumber() / LAMPORTS_PER_SOL;\r\n  },\r\n};\r\n\r\nexport const SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID =\r\n  new anchor.web3.PublicKey('ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');\r\n\r\nexport const CIVIC = new anchor.web3.PublicKey(\r\n  'gatem74V238djXdzWnJf94Wo1DcnuGkfijbf3AuBhfs',\r\n);\r\n\r\nexport const getAtaForMint = async (\r\n  mint: anchor.web3.PublicKey,\r\n  buyer: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [buyer.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), mint.toBuffer()],\r\n    SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n  );\r\n};\r\n\r\nexport const getNetworkExpire = async (\r\n  gatekeeperNetwork: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [gatekeeperNetwork.toBuffer(), Buffer.from('expire')],\r\n    CIVIC,\r\n  );\r\n};\r\n\r\nexport const getNetworkToken = async (\r\n  wallet: anchor.web3.PublicKey,\r\n  gatekeeperNetwork: anchor.web3.PublicKey,\r\n): Promise<[anchor.web3.PublicKey, number]> => {\r\n  return await anchor.web3.PublicKey.findProgramAddress(\r\n    [\r\n      wallet.toBuffer(),\r\n      Buffer.from('gateway'),\r\n      Buffer.from([0, 0, 0, 0, 0, 0, 0, 0]),\r\n      gatekeeperNetwork.toBuffer(),\r\n    ],\r\n    CIVIC,\r\n  );\r\n};\r\n\r\nexport function createAssociatedTokenAccountInstruction(\r\n  associatedTokenAddress: anchor.web3.PublicKey,\r\n  payer: anchor.web3.PublicKey,\r\n  walletAddress: anchor.web3.PublicKey,\r\n  splTokenMintAddress: anchor.web3.PublicKey,\r\n) {\r\n  const keys = [\r\n    {\r\n      pubkey: payer,\r\n      isSigner: true,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: associatedTokenAddress,\r\n      isSigner: false,\r\n      isWritable: true,\r\n    },\r\n    {\r\n      pubkey: walletAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: splTokenMintAddress,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SystemProgram.programId,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: TOKEN_PROGRAM_ID,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n    {\r\n      pubkey: SYSVAR_RENT_PUBKEY,\r\n      isSigner: false,\r\n      isWritable: false,\r\n    },\r\n  ];\r\n  return new TransactionInstruction({\r\n    keys,\r\n    programId: SPL_ASSOCIATED_TOKEN_ACCOUNT_PROGRAM_ID,\r\n    data: Buffer.from([]),\r\n  });\r\n}\r\n"],"sourceRoot":""}